;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package repos and settings ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;;;;;;;;;;;;;;;
;; Undo Tree ;;
;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/sean/undo-tree")
(require 'undo-tree)
(global-undo-tree-mode)

;;;;;;;;;;;;;;;
;; Evil Mode ;;
;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/sean/evil-evil")
(require 'evil)
(evil-mode 1)

;; change mode-line color by evil state
(lexical-let ((default-color (cons (face-background 'mode-line)
                                   (face-foreground 'mode-line))))
  (add-hook 'post-command-hook
            (lambda ()
              (let ((color (cond ((minibufferp) default-color)
                                 ((evil-insert-state-p) '("#e80000" . "#ffffff"))
                                 ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
                                 ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
                                 (t default-color))))
                (set-face-background 'mode-line (car color))
                (set-face-foreground 'mode-line (cdr color))))))

;;;;;;;;;;;;;;;
;; Powerline ;;
;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/sean/powerline")
(require 'powerline)
(powerline-center-theme)

;;;;;;;;;;;;;;;;;;;;;;;
;; Package Inclusion ;;
;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/")
             '("melpa" . "http://melpa-stable.milkbox.net/packages/"))
(package-initialize)

;;;;;;;;;;;;;;;;
;; Path Setup ;;
;;;;;;;;;;;;;;;;
(setq exec-path (append '("/usr/local/bin") exec-path))

;;;;;;;;;;;;;;;;;;
;; Key Bindings ;;
;;;;;;;;;;;;;;;;;;
(setq mac-command-modifier 'meta)

;; Smex Key Bindings
(global-set-key [(meta x)] (lambda ()
                             (interactive)
                             (or (boundp 'smex-cache)
                                 (smex-initialize))
                             (global-set-key [(meta x)] 'smex)
                             (smex)))

(global-set-key [(shift meta x)] (lambda ()
                                   (interactive)
                                   (or (boundp 'smex-cache)
                                       (smex-initialize))
                                   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                   (smex-major-mode-commands)))

;;;;;;;;;;;;;;
;; Ido Mode ;;
;;;;;;;;;;;;;;
(require 'ido)
(ido-mode t)

;;;;;;;;;;;;;;;;;;;;
;; Activate ElDoc ;;
;;;;;;;;;;;;;;;;;;;;
(require 'eldoc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Temp Directory Settings ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq temporary-file-directory "/Users/manky/Documents/temp/")

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;;;;;;;;;;;;;;;;;;;;;;
;; Haskell Settings ;;
;;;;;;;;;;;;;;;;;;;;;;

(setq exec-path (append exec-path '("/Users/manky/.cabal/bin")))

(autoload 'ghc-init "ghc" nil t)
(autoload 'ghc-debug "ghc" nil t)

(add-hook 'haskell-mode-hook (lambda ()
;;                 (turn-on-haskell-doc-mode)
                   (turn-on-haskell-indentation)
;;                 (turn-on-haskell-unicode-input-method)
                               (ghc-init)))

;;;;;;;;;;;;;;;;;;
;; Coq Settings ;;
;;;;;;;;;;;;;;;;;;

(add-to-list 'load-path (expand-file-name "/usr/local/Cellar/coq/8.4pl3/lib/emacs/site-lisp"))

(setq auto-mode-alist (cons '("\\.v$" . coq-mode) auto-mode-alist))
(autoload 'coq-mode "coq" "Major mode for editing Coq vernacular." t)
(load-file "/usr/local/share/emacs/site-lisp/ProofGeneral/generic/proof-site.el")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Paredit Mode Initialisations ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Activate Paredit on Desired Modes
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
(add-hook 'erlang-mode-hook           #'enable-paredit-mode)

(eldoc-add-command
 'paredit-backward-delete
 'paredit-close-round)

;;;;;;;;;;;;;;
;; LFE Mode ;;
;;;;;;;;;;;;;;
;; Set lfe-dir to point to where the lfe emacs files are.
(defvar lfe-dir (concat (getenv "HOME") "/Documents/projects/LFE/lfe/emacs"))
(setq load-path (cons lfe-dir load-path))
(require 'lfe-start)

(add-to-list 'load-path (expand-file-name "~/.emacs.d/sean/lfe"))
;; (require 'lfe-mode)
(add-hook 'lfe-mode-hook (lambda ()
                           (paredit-mode t)
                           ;; Turn on ElDoc Mode
                           (eldoc-mode t)))

;;;;;;;;;;;;;;;;;
;; Erlang Mode ;;
;;;;;;;;;;;;;;;;;

(add-hook 'erlang-mode-hook (lambda ()
                  (c-set-offset 'arglist-close 0)
                  (c-set-offset 'arglist-intro '+)))

;;;;;;;;;;;;;;
;; PHP Mode ;;
;;;;;;;;;;;;;;


(require 'php-mode)

(defun php-mode-init ()
  "Set some buffer local variables"
  (electric-indent-mode t)
  (setq case-fold-search t)
  (setq c-basic-offset 2)
  (setq fill-column 78)
  (c-set-offset 'case-label 2)
  (c-set-offset 'arglist-cont 0)
  (c-set-offset 'arglist-close 0)
  (c-set-offset 'arglist-intro '+))

(add-hook 'php-mode-hook 'php-mode-init)

;;;;;;;;;;;;;;;;;;;;;;;
;; CoffeeScript Mode ;;
;;;;;;;;;;;;;;;;;;;;;;;


(require 'coffee-mode)
(add-hook 'coffee-mode-hook (lambda ()
                              (electric-indent-mode t)
                              (setq case-fold-search t)
                              (setq c-basic-offset 2)
                              (setq fill-column 78)
                              ;; Turn on auto-complete
                              (auto-complete-mode 1)
                              ;; Turn on ElDoc Mode
                              (eldoc-mode 1)
                              ;; Set my coffee command
                              (setq coffee-command "/usr/local/bin/coffee")
                              ;; This stops compiled files from being wrapped
                              (setq coffee-args-compile '("-c" "-b"))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; File Extension Triggers ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Lisp Flavoured Erlang
(add-to-list 'auto-mode-alist '("\\.lfe$" . lfe-mode))

;; Coffeescript Mode
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))

;; Ugh... Drupal
(add-to-list 'auto-mode-alist '("\\.module$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.install$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.engine$" . php-mode))

;; The various markdown modes
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

;; Shader Program File Highlighting
(add-to-list 'auto-mode-alist '("\\.vert$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.frag$" . c++-mode))

;; Add my trigger for erlang mode for .erl files
(add-to-list 'auto-mode-alist '("\\.erl$" . erlang-mode))

;; ELM lang files
(add-to-list 'auto-mode-alist '("\\.elm$" . haskell-mode))

;; PureScript lang files
(add-to-list 'auto-mode-alist '("\\.purs$" . haskell-mode))

;;;;;;;;;;;;;;;;;;;;;
;; Initialisations ;;
;;;;;;;;;;;;;;;;;;;;;

;; Enable paredit for a couple for non lisp modes; tweak
;; paredit-space-for-delimiter-predicates to avoid inserting spaces
;; before open parens.
(dolist (mode '(c++ c erlang))
  (add-hook (intern (format "%s-mode-hook" mode))
            '(lambda ()
               (add-to-list (make-local-variable 'paredit-space-for-delimiter-predicates)
                            (lambda (_ _) nil)))))


;;;;;;;;;;;;;;;;
;; Idris Mode ;;
;;;;;;;;;;;;;;;;

(add-to-list 'load-path (expand-file-name "~/.emacs.d/sean/idris-mode"))
(require 'idris-mode)

;;;;;;;;;;;;;;;;;;;;;;;
;; Re-Builder (Perl) ;;
;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path (expand-file-name "~/.emacs.d/sean/re-builder-x"))
(require 're-builder-x)

;;;;;;;;;;;;;;;;;;;;;;
;; Custom Variables ;;
;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector ["black" "light gray" "dark gray" "light slate gray"])
 '(custom-enabled-themes (quote (wombat)))
 '(custom-safe-themes (quote ("39dd7106e6387e0c45dfce8ed44351078f6acd29a345d8b22e7b8e54ac25bac4" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "a6df4e244c3ced9e44376747bf70b5499a02212e5f8e40ac68c4a6c5cc6f86d2" default)))
 '(enable-theme (quote sanityinc-solarized-dark))
 '(fci-rule-color "#0a2832")
 '(inhibit-startup-screen 1)
 '(magit-use-overlays nil)
 '(show-paren-mode 1)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map (quote ((20 . "#c60007") (40 . "#bd3612") (60 . "#a57705") (80 . "#728a05") (100 . "#259185") (120 . "#2075c7") (140 . "#c61b6e") (160 . "#5859b7") (180 . "#c60007") (200 . "#bd3612") (220 . "#a57705") (240 . "#728a05") (260 . "#259185") (280 . "#2075c7") (300 . "#c61b6e") (320 . "#5859b7") (340 . "#c60007") (360 . "#bd3612"))))
 '(vc-annotate-very-old-color nil))

;; Global Linum Mode
(global-linum-mode t)
;; Fix the artefacting
(setq linum-format "  %d ")

;; Font settings
(set-face-attribute 'default (selected-frame) :height 98)
(set-default-font "-apple-Liberation_Mono_for_Powerline-medium-normal-normal-*-10-*-*-*-m-0-iso10646-1")
;; Highlight the current line
(hl-line-mode 0)

;; Use spaces and not tabs
(setq indent-tabs-mode nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
